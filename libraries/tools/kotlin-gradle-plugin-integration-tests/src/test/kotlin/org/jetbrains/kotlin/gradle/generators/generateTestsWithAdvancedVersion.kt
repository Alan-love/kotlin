/*
 * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.gradle.generators

import org.jetbrains.kotlin.gradle.*
import org.jetbrains.kotlin.gradle.model.*
import java.io.File
import kotlin.reflect.KClass

fun main(args: Array<String>) {
    targetSourceRoot.deleteRecursively()
    targetSourceRoot.mkdirs()

    generateTest<AllOpenModelIT>()
    generateTest<BuildCacheIT>()
    generateTest<BuildCacheRelocationIT>()
    generateTest<ClassFileIsRemovedIT>()
    generateTest<CocoaPodsIT>()
    generateTest<ConfigurationAvoidanceIT>()
    generateTest<CoroutinesIT>()
    generateTest<ExecutionStrategyJsIT>()
    generateTest<ExecutionStrategyJvmIT>()
    generateTest<GradleDaemonMemoryIT>()
    generateTest<HierarchicalMppIT>()
    generateTest<IncrementalCompilationJsMultiProjectIT>()
    generateTest<IncrementalCompilationJvmMultiProjectIT>()
    generateTest<IncrementalJavaChangeDefaultIT>()
    generateTest<IncrementalJavaChangeDisablePreciseIT>()
    generateTest<IncrementalJavaChangePreciseIT>()
    generateTest<JavaUpToDateIT>()
    generateTest<Kapt3Android31IT>()
    generateTest<Kapt3Android32IT>()
    generateTest<Kapt3Android33IT>()
    generateTest<Kapt3IT>()
    generateTest<Kapt3WorkersAndroid32IT>()
    generateTest<Kapt3WorkersIT>()
    generateTest<KaptIncrementalIT>()
    generateTest<KaptIncrementalWithAggregatingApt>()
    generateTest<KaptIncrementalWithIsolatingApt>()
    generateTest<KaptModelIT>()
    generateTest<Kotlin2JsGradlePluginIT>()
    generateTest<KotlinAndroid30GradleIT>()
    generateTest<KotlinAndroid32GradleIT>()
    generateTest<KotlinAndroid33GradleIT>()
    generateTest<KotlinAndroidExtensionIT>()
    generateTest<KotlinDaemonIT>()
    generateTest<KotlinGradleIT>()
    generateTest<KotlinProjectIT>()
    generateTest<MultiplatformGradleIT>()
    generateTest<NewMultiplatformIT>()
    generateTest<NoArgModelIT>()
    generateTest<PluginsDslIT>()
    generateTest<SamWithReceiverModelIT>()
    generateTest<SimpleKotlinGradleIT>()
    generateTest<TestRootAffectedIT>()
    generateTest<UpToDateIT>()
    generateTest<VariantAwareDependenciesIT>()
    generateTest<WorkersIT>()
}

private val targetSourceRoot = File("libraries/tools/kotlin-gradle-plugin-integration-tests/src/generatedTest")
private const val targetPackage = "org.jetbrains.kotlin.gradle.advanced"

private inline fun <reified T> generateTest() {
    val kClass = T::class
    val targetFile = targetSourceRoot
        .resolve(targetPackage.replace(".", "/"))
        .resolve("Advanced" + kClass.simpleName + ".kt")
    targetFile.parentFile.mkdirs()
    targetFile.bufferedWriter().use {
        generateTest(kClass, it)
    }
}

private fun generateTest(klass: KClass<*>, p: Appendable) {
    p.appendln("// DO NOT EDIT MANUALLY! GENERATED BY generateTestsWithAdvancedVersion.kt")
    p.appendln("package $targetPackage")

    p.appendln()
    p.appendln("class Advanced${klass.simpleName} : ${klass.qualifiedName}() {")
    p.appendln("    override val advanceGradleVersion = true")
    p.appendln("}")
}